(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, P, A:&nbsp;?Sized&gt; RefUnwindSafe for Matches&lt;'a, 's, P, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, P, A:&nbsp;?Sized&gt; RefUnwindSafe for StreamMatches&lt;'a, R, P, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, P, A:&nbsp;?Sized&gt; RefUnwindSafe for MatchesOverlapping&lt;'a, 's, P, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, P, A:&nbsp;?Sized&gt; RefUnwindSafe for StreamMatchesOverlapping&lt;'a, R, P, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for FullAcAutomaton&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T&gt; RefUnwindSafe for AcAutomaton&lt;P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dense","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sparse","synthetic":true,"types":[]}];
implementors["bigdecimal"] = [{"text":"impl RefUnwindSafe for BigDecimal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseBigDecimalError","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl RefUnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseMonthError","synthetic":true,"types":[]}];
implementors["diesel"] = [{"text":"impl !RefUnwindSafe for AnsiTransactionManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for now","synthetic":true,"types":[]},{"text":"impl&lt;ST, T&gt; RefUnwindSafe for SqlLiteral&lt;ST, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ST: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Query, Value&gt; RefUnwindSafe for UncheckedBind&lt;Query, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Query: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB&gt; !RefUnwindSafe for AstPass&lt;'a, DB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;DB&gt; RefUnwindSafe for RawBytesBindCollector&lt;DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DB as TypeMetadata&gt;::TypeMetadata: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, DB&gt; RefUnwindSafe for DebugQuery&lt;'a, T, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U, Ret&gt; RefUnwindSafe for DeleteStatement&lt;T, U, Ret&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ret: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Op&gt; RefUnwindSafe for IncompleteInsertStatement&lt;T, Op&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Op: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U, Op, Ret&gt; RefUnwindSafe for InsertStatement&lt;T, U, Op, Ret&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Op: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ret: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SqlQuery","synthetic":true,"types":[]},{"text":"impl&lt;T, U, V, Ret&gt; RefUnwindSafe for UpdateStatement&lt;T, U, V, Ret&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ret: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Never","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoreThanOnce","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ConnectionManager&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DatabaseErrorKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConnectionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnexpectedNullError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNull","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, DB&gt; RefUnwindSafe for Output&lt;'a, T, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DB as TypeMetadata&gt;::MetadataLookup: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TinyInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SmallInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Integer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Float","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Double","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Text","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl&lt;ST&gt; RefUnwindSafe for Nullable&lt;ST&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ST: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MigrationError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RunMigrationsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mysql","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MysqlType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MysqlConnection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MysqlQueryBuilder","synthetic":true,"types":[]},{"text":"impl&lt;ST&gt; RefUnwindSafe for Unsigned&lt;ST&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ST: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Datetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PgTimestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PgDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PgTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PgInterval","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PgNumeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PgMoney","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Oid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamptz","synthetic":true,"types":[]},{"text":"impl&lt;ST&gt; RefUnwindSafe for Array&lt;ST&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ST: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ST&gt; RefUnwindSafe for Range&lt;ST&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ST: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ST&gt; RefUnwindSafe for Record&lt;ST&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ST: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uuid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Json","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Jsonb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Money","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cidr","synthetic":true,"types":[]},{"text":"impl&lt;Stmt, Target&gt; RefUnwindSafe for IncompleteOnConflict&lt;Stmt, Target&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Stmt: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Stmt, Target&gt; RefUnwindSafe for IncompleteDoUpdate&lt;Stmt, Target&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Stmt: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PgTypeMetadata","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PgConnection","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PgMetadataLookup","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DistinctOnClause&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PgQueryBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TransactionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sqlite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SqliteType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SqliteConnection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SqliteQueryBuilder","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl !RefUnwindSafe for Logger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LogBuilder","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["ipnetwork"] = [{"text":"impl RefUnwindSafe for IpNetworkError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Network","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Network","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpNetwork","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetworkSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpNetworkIterator","synthetic":true,"types":[]}];
implementors["libsqlite3_sys"] = [{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_file","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_file_sqlite3_io_methods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_mutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_vfs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_mem_methods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_vtab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_index_info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_index_info_sqlite3_index_constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_index_info_sqlite3_index_orderby","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_index_info_sqlite3_index_constraint_usage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_vtab_cursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_module","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_blob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_mutex_methods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_pcache","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_pcache_page","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_pcache_methods2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_pcache_methods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_backup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sqlite3_rtree_geometry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __va_list_tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limit","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl RefUnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LogRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LogMetadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxLogLevelFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownLoggerError","synthetic":true,"types":[]}];
implementors["migrations_internals"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for MigrationName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for MigrationFileName&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mysqlclient_sys"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for __BindgenUnionField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enum_field_types","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_vio","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_net","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mysql_enum_shutdown_level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enum_mysql_set_option","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enum_session_state_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enum_mysql_timestamp_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_list","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_client_plugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_charset_info_st","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_plugin_vio_info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_plugin_vio_info__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_plugin_vio","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_used_mem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mem_root","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_rows","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for embedded_query_result","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mysql_option","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_options_extention","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_options_st_dynamic_array","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_options__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mysql_status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mysql_protocol_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mysql_ssl_mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for character_set","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_methods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_res","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enum_mysql_stmt_state","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_bind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for st_mysql_stmt_extension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enum_stmt_attr_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __va_list_tag","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl RefUnwindSafe for Sign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseBigIntError","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl RefUnwindSafe for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseFloatError","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl RefUnwindSafe for SIMPLE_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QUERY_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DEFAULT_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PATH_SEGMENT_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for USERINFO_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for PercentEncode&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["pq_sys"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for __BindgenUnionField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __sbuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __sFILEX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __sFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _bindgen_ty_3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _bindgen_ty_4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _bindgen_ty_5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _bindgen_ty_6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _bindgen_ty_7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pg_conn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pg_result","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pg_cancel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pgNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _PQprintOpt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _PQconninfoOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _bindgen_ty_8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _bindgen_ty_8__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pgresAttDesc","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]}];
implementors["quickcheck"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for StdGen&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; RefUnwindSafe for QuickCheck&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestResult","synthetic":true,"types":[]}];
implementors["r2d2"] = [{"text":"impl&lt;M&gt; !RefUnwindSafe for Builder&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NopEventHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcquireEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReleaseEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckoutEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeoutEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckinEvent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NopErrorHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoggingErrorHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NopConnectionCustomizer","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !RefUnwindSafe for Pool&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !RefUnwindSafe for PooledConnection&lt;M&gt;","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl&lt;X&gt; RefUnwindSafe for Range&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl&lt;Sup&gt; RefUnwindSafe for RandSample&lt;Sup&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Weighted&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for WeightedChoice&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JitterRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReseedWithDefault","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaChaRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsaacRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XorShiftRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, R&gt; RefUnwindSafe for Generator&lt;'a, T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for AsciiGenerator&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Open01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Closed01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadRng","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for FindMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for FindCaptures&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Splits&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitsN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptures&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; RefUnwindSafe for SubCapturesPos&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCapturesNamed&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for NoExpand&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for RegexSplits&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for RegexSplitsN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; RefUnwindSafe for SubCaptures&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; RefUnwindSafe for SubCapturesPos&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; RefUnwindSafe for SubCapturesNamed&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for FindCaptures&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for FindMatches&lt;'r, 't&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl RefUnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeater","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ByteClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ByteRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["scheduled_thread_pool"] = [{"text":"impl RefUnwindSafe for JobHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ScheduledThreadPool","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for BytesDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; RefUnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; RefUnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ThreadLocal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Replacements&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for HostAndPort&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketAddrs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Serializer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["utf8_ranges"] = [{"text":"impl RefUnwindSafe for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequences","synthetic":true,"types":[]}];
implementors["uuid"] = [{"text":"impl RefUnwindSafe for Uuid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UuidVariant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UuidVersion","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Simple&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Hyphenated&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Urn&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()